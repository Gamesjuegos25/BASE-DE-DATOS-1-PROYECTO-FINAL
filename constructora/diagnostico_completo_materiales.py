#!/usr/bin/env python3
"""
Script de diagn√≥stico completo para el m√≥dulo de materiales
"""

import sys
sys.path.insert(0, '.')

from database import get_materiales_safe, get_material_by_id_safe

def analizar_datos_materiales():
    print("=" * 60)
    print("DIAGN√ìSTICO COMPLETO - M√ìDULO MATERIALES")
    print("=" * 60)
    
    # Obtener materiales
    materiales = get_materiales_safe()
    
    print(f"\nTotal de materiales encontrados: {len(materiales)}")
    
    # An√°lisis de campos disponibles
    if materiales:
        print(f"\nCampos disponibles en el primer material:")
        primer_material = materiales[0]
        for campo in sorted(primer_material.keys()):
            valor = primer_material.get(campo)
            print(f"  {campo}: {valor} ({type(valor).__name__})")
    
    print(f"\n" + "=" * 60)
    print("AN√ÅLISIS DETALLADO POR MATERIAL")
    print("=" * 60)
    
    for i, material in enumerate(materiales, 1):
        print(f"\n{i}. {material.get('nombre', 'SIN NOMBRE')}")
        print(f"   ID: {material.get('id_material')}")
        print(f"   ‚îú‚îÄ Informaci√≥n B√°sica:")
        print(f"   ‚îÇ  ‚îú‚îÄ Unidad: {material.get('unidad', 'No especificada')}")
        print(f"   ‚îÇ  ‚îú‚îÄ Precio: Q{material.get('precio_unitario', 0):,.2f}")
        print(f"   ‚îÇ  ‚îî‚îÄ Descripci√≥n: {material.get('descripcion', 'Sin descripci√≥n')}")
        
        print(f"   ‚îú‚îÄ Stock/Inventario:")
        print(f"   ‚îÇ  ‚îú‚îÄ Stock Actual: {material.get('stock_actual', 'N/D')}")
        print(f"   ‚îÇ  ‚îî‚îÄ Stock M√≠nimo: {material.get('stock_minimo', 'N/D')}")
        
        print(f"   ‚îú‚îÄ Proveedor:")
        print(f"   ‚îÇ  ‚îú‚îÄ Nombre: {material.get('proveedor_nombre', 'Sin proveedor')}")
        print(f"   ‚îÇ  ‚îî‚îÄ Contacto: {material.get('proveedor_contacto', 'Sin contacto')}")
        
        print(f"   ‚îî‚îÄ Clasificaci√≥n:")
        print(f"      ‚îú‚îÄ Categor√≠a: {material.get('categoria', 'Sin categor√≠a')}")
        print(f"      ‚îî‚îÄ Estado: {material.get('estado', 'Sin estado')}")
    
    print(f"\n" + "=" * 60)
    print("RESUMEN DE PROBLEMAS IDENTIFICADOS")
    print("=" * 60)
    
    problemas = []
    
    # Contadores para an√°lisis
    sin_proveedor = 0
    sin_stock = 0
    sin_descripcion = 0
    
    for material in materiales:
        if not material.get('proveedor_nombre'):
            sin_proveedor += 1
        if material.get('stock_actual', 0) == 0:
            sin_stock += 1
        if material.get('descripcion') == 'Sin descripci√≥n':
            sin_descripcion += 1
    
    print(f"\nüìä ESTAD√çSTICAS:")
    print(f"   ‚Ä¢ Materiales sin proveedor: {sin_proveedor}/{len(materiales)} ({sin_proveedor/len(materiales)*100:.1f}%)")
    print(f"   ‚Ä¢ Materiales sin stock: {sin_stock}/{len(materiales)} ({sin_stock/len(materiales)*100:.1f}%)")
    print(f"   ‚Ä¢ Materiales sin descripci√≥n: {sin_descripcion}/{len(materiales)} ({sin_descripcion/len(materiales)*100:.1f}%)")
    
    print(f"\nüîß RECOMENDACIONES:")
    if sin_proveedor > 0:
        print(f"   1. Asignar proveedores a {sin_proveedor} materiales")
    if sin_descripcion == len(materiales):
        print(f"   2. Agregar descripciones detalladas a los materiales")
    if sin_stock > 0:
        print(f"   3. Actualizar informaci√≥n de stock para {sin_stock} materiales")
    
    # Verificar datos de un material espec√≠fico
    print(f"\n" + "=" * 60)
    print("PRUEBA DE DETALLE INDIVIDUAL")
    print("=" * 60)
    
    if materiales:
        material_id = materiales[0]['id_material']
        detalle = get_material_by_id_safe(material_id)
        
        print(f"\nDetalle del material ID {material_id}:")
        if detalle:
            for campo, valor in detalle.items():
                print(f"   {campo}: {valor}")
        else:
            print("   ERROR: No se pudo obtener el detalle")

if __name__ == "__main__":
    try:
        analizar_datos_materiales()
    except Exception as e:
        print(f"ERROR en el an√°lisis: {e}")
        import traceback
        traceback.print_exc()