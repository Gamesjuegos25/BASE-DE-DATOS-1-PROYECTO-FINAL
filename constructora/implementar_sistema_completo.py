#!/usr/bin/env python3
"""
Script de Implementaci√≥n del Sistema ERP Constructora Completo
86 Tablas - 8 M√≥dulos Integrados

Este script ejecuta la implementaci√≥n completa del sistema extendido.
"""

import subprocess
import sys
import os
import time

def ejecutar_comando(comando, descripcion):
    """Ejecuta un comando y muestra el resultado"""
    print(f"\n{'='*60}")
    print(f"üîÑ {descripcion}")
    print(f"{'='*60}")
    
    try:
        if isinstance(comando, list):
            resultado = subprocess.run(comando, capture_output=True, text=True, shell=True)
        else:
            resultado = subprocess.run(comando, capture_output=True, text=True, shell=True)
        
        if resultado.returncode == 0:
            print(f"‚úÖ {descripcion} - EXITOSO")
            if resultado.stdout:
                print("Salida:", resultado.stdout[:500])
        else:
            print(f"‚ùå {descripcion} - ERROR")
            print("Error:", resultado.stderr)
            return False
        
        return True
    except Exception as e:
        print(f"‚ùå Error ejecutando {descripcion}: {e}")
        return False

def verificar_postgres():
    """Verifica si PostgreSQL est√° ejecut√°ndose"""
    print("\nüîç Verificando PostgreSQL...")
    comando = 'psql -U postgres -d PROYECTO_FINAL_BD1 -c "SELECT version();"'
    return ejecutar_comando(comando, "Verificaci√≥n de PostgreSQL")

def crear_tablas_extendidas():
    """Crea las 30 nuevas tablas"""
    print("\nüìä Creando 30 nuevas tablas...")
    comando = 'psql -U postgres -d PROYECTO_FINAL_BD1 -f "EXTENSION_TABLAS_COMPLETA.sql"'
    return ejecutar_comando(comando, "Creaci√≥n de tablas extendidas")

def insertar_datos_ejemplo():
    """Inserta datos de ejemplo en las nuevas tablas"""
    print("\nüíæ Insertando datos de ejemplo...")
    comando = 'psql -U postgres -d PROYECTO_FINAL_BD1 -f "DATOS_EXTENSION_COMPLETA.sql"'
    return ejecutar_comando(comando, "Inserci√≥n de datos de ejemplo")

def instalar_dependencias():
    """Instala las dependencias de Python necesarias"""
    print("\nüì¶ Verificando dependencias de Python...")
    
    dependencias = [
        "flask==3.0.0",
        "psycopg2-binary==2.9.9",
        "python-dotenv==1.0.0"
    ]
    
    for dep in dependencias:
        comando = f"pip install {dep}"
        if not ejecutar_comando(comando, f"Instalando {dep}"):
            return False
    
    return True

def integrar_codigo_extendido():
    """Integra el c√≥digo extendido al sistema existente"""
    print("\nüîß Integrando c√≥digo extendido...")
    
    try:
        # Leer el archivo de extensi√≥n de database.py
        with open('database_extension.py', 'r', encoding='utf-8') as f:
            extension_code = f.read()
        
        # Leer el archivo database.py existente
        with open('database.py', 'r', encoding='utf-8') as f:
            existing_code = f.read()
        
        # Verificar si ya est√° integrado
        if "# FUNCIONES EXTENDIDAS PARA 30 NUEVAS TABLAS" in existing_code:
            print("‚úÖ El c√≥digo extendido ya est√° integrado en database.py")
        else:
            # Agregar el c√≥digo de extensi√≥n
            with open('database.py', 'a', encoding='utf-8') as f:
                f.write('\n\n' + extension_code)
            print("‚úÖ C√≥digo extendido agregado a database.py")
        
        return True
    
    except Exception as e:
        print(f"‚ùå Error integrando c√≥digo: {e}")
        return False

def crear_rutas_extendidas():
    """Crea las rutas extendidas en app.py"""
    print("\nüõ†Ô∏è Configurando rutas extendidas...")
    
    try:
        # Leer el archivo de extensi√≥n de app.py
        with open('app_extension.py', 'r', encoding='utf-8') as f:
            extension_routes = f.read()
        
        # Leer el archivo app.py existente
        with open('app.py', 'r', encoding='utf-8') as f:
            existing_app = f.read()
        
        # Verificar si ya est√° integrado
        if "# RUTAS M√ìDULO FACTURACI√ìN Y PAGOS" in existing_app:
            print("‚úÖ Las rutas extendidas ya est√°n integradas en app.py")
        else:
            # Buscar el punto de inserci√≥n (antes del if __name__ == '__main__':)
            insertion_point = existing_app.find("if __name__ == '__main__':")
            if insertion_point != -1:
                new_app_content = (existing_app[:insertion_point] + 
                                 '\n\n' + extension_routes + '\n\n' + 
                                 existing_app[insertion_point:])
                
                with open('app.py', 'w', encoding='utf-8') as f:
                    f.write(new_app_content)
                print("‚úÖ Rutas extendidas agregadas a app.py")
            else:
                print("‚ùå No se pudo encontrar el punto de inserci√≥n en app.py")
                return False
        
        return True
    
    except Exception as e:
        print(f"‚ùå Error configurando rutas: {e}")
        return False

def verificar_sistema():
    """Verifica que el sistema est√° funcionando correctamente"""
    print("\nüîç Verificando sistema completo...")
    
    # Verificar tablas creadas
    comando = '''psql -U postgres -d PROYECTO_FINAL_BD1 -c "
    SELECT 'Total de tablas: ' || COUNT(*) as resultado
    FROM information_schema.tables 
    WHERE table_schema = 'public' AND table_type = 'BASE TABLE';
    "'''
    
    if not ejecutar_comando(comando, "Verificaci√≥n de tablas"):
        return False
    
    # Verificar datos insertados
    comando = '''psql -U postgres -d PROYECTO_FINAL_BD1 -c "
    SELECT 'Facturas: ' || COUNT(*) FROM FACTURAS
    UNION ALL
    SELECT 'Repuestos: ' || COUNT(*) FROM REPUESTOS
    UNION ALL
    SELECT 'M√©tricas KPI: ' || COUNT(*) FROM METRICAS_KPI;
    "'''
    
    return ejecutar_comando(comando, "Verificaci√≥n de datos")

def mostrar_resumen():
    """Muestra un resumen del sistema implementado"""
    print(f"\n{'='*80}")
    print("üéâ SISTEMA ERP CONSTRUCTORA COMPLETO IMPLEMENTADO")
    print(f"{'='*80}")
    print("""
üìä ESTAD√çSTICAS DEL SISTEMA:
   ‚Ä¢ Total de Tablas: 86 (56 originales + 30 nuevas)
   ‚Ä¢ M√≥dulos Funcionales: 8
   ‚Ä¢ Archivos de Configuraci√≥n: 5
   ‚Ä¢ Plantillas HTML: 15+
   ‚Ä¢ Funciones de Base de Datos: 150+

üèóÔ∏è M√ìDULOS IMPLEMENTADOS:
   1. Comercial (Clientes, Obras, Contratos)
   2. Facturaci√≥n (Facturas, Pagos, Cobranzas)
   3. Contabilidad (Cuentas, Movimientos, Flujo de Caja)
   4. Recursos Humanos (Empleados, N√≥mina, Capacitaciones)
   5. Activos (Equipos, Veh√≠culos, Mantenimiento)
   6. Inventarios (Materiales, Bodegas, Compras)
   7. Reportes (KPIs, Dashboards, Alertas)
   8. Seguridad (Auditor√≠a, Control de Acceso)

üöÄ PARA EJECUTAR EL SISTEMA:
   1. cd constructora
   2. python app.py
   3. Abrir navegador en: http://127.0.0.1:5000
   4. Acceder a: http://127.0.0.1:5000/sistema-completo

üîß FUNCIONALIDADES DISPONIBLES:
   ‚Ä¢ Dashboard unificado con m√©tricas en tiempo real
   ‚Ä¢ Gesti√≥n completa de facturaci√≥n y cobranzas
   ‚Ä¢ Control contable y flujo de caja
   ‚Ä¢ Mantenimiento preventivo y correctivo
   ‚Ä¢ Gesti√≥n de n√≥mina y asistencia
   ‚Ä¢ Reportes avanzados y KPIs
   ‚Ä¢ B√∫squeda global en todo el sistema
   ‚Ä¢ Alertas autom√°ticas del sistema

üìù ARCHIVOS PRINCIPALES:
   ‚Ä¢ app.py - Aplicaci√≥n Flask principal
   ‚Ä¢ database.py - Funciones de base de datos
   ‚Ä¢ EXTENSION_TABLAS_COMPLETA.sql - 30 nuevas tablas
   ‚Ä¢ DATOS_EXTENSION_COMPLETA.sql - Datos de ejemplo
   ‚Ä¢ templates/sistema_completo.html - Dashboard principal
   """)
    print(f"{'='*80}")

def main():
    """Funci√≥n principal de implementaci√≥n"""
    print("üèóÔ∏è IMPLEMENTACI√ìN SISTEMA ERP CONSTRUCTORA COMPLETO")
    print("86 Tablas - 8 M√≥dulos Integrados")
    print(f"{'='*60}")
    
    # Cambiar al directorio de trabajo
    os.chdir(os.path.dirname(os.path.abspath(__file__)))
    
    pasos = [
        (verificar_postgres, "Verificaci√≥n de PostgreSQL"),
        (instalar_dependencias, "Instalaci√≥n de dependencias"),
        (crear_tablas_extendidas, "Creaci√≥n de 30 nuevas tablas"),
        (insertar_datos_ejemplo, "Inserci√≥n de datos de ejemplo"),
        (integrar_codigo_extendido, "Integraci√≥n de c√≥digo extendido"),
        (crear_rutas_extendidas, "Configuraci√≥n de rutas extendidas"),
        (verificar_sistema, "Verificaci√≥n del sistema completo")
    ]
    
    pasos_exitosos = 0
    
    for paso_func, descripcion in pasos:
        if paso_func():
            pasos_exitosos += 1
            time.sleep(1)  # Pausa breve entre pasos
        else:
            print(f"\n‚ùå FALLO EN: {descripcion}")
            print("üîß Revise los errores anteriores y vuelva a intentar")
            return False
    
    if pasos_exitosos == len(pasos):
        mostrar_resumen()
        print("\nüéâ ¬°IMPLEMENTACI√ìN COMPLETADA EXITOSAMENTE!")
        print("üöÄ El sistema est√° listo para usar")
        return True
    else:
        print(f"\n‚ö†Ô∏è Implementaci√≥n parcial: {pasos_exitosos}/{len(pasos)} pasos completados")
        return False

if __name__ == "__main__":
    try:
        exito = main()
        sys.exit(0 if exito else 1)
    except KeyboardInterrupt:
        print("\n\n‚èπÔ∏è Implementaci√≥n cancelada por el usuario")
        sys.exit(1)
    except Exception as e:
        print(f"\nüí• Error inesperado: {e}")
        sys.exit(1)