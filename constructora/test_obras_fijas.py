#!/usr/bin/env python3
"""
Script de prueba para verificar la funcionalidad de obras fijas
"""

import requests
import json
from database import get_connection

def test_obras_fijas_api():
    """Probar la API de tipos de obra que usa el JavaScript"""
    try:
        # Probar la conexi√≥n a la base de datos primero
        conn = get_connection()
        cur = conn.cursor()
        
        print("üß™ PROBANDO FUNCIONALIDAD OBRAS FIJAS")
        print("=" * 50)
        
        # 1. Verificar tipos de obra en BD
        print("\n1Ô∏è‚É£ VERIFICANDO TIPOS EN BASE DE DATOS:")
        cur.execute("SELECT id_tipo_obra, nombre_tipo, precio_base FROM tipos_obra WHERE activo = true LIMIT 5")
        tipos = cur.fetchall()
        
        for id_tipo, nombre, precio in tipos:
            precio_num = float(precio) if precio else 0
            print(f"   ‚Ä¢ ID {id_tipo}: {nombre} - Q{precio_num:,.0f}")
        
        # 2. Verificar estructura de tabla
        print(f"\n2Ô∏è‚É£ ESTRUCTURA DE TABLA tipos_obra:")
        cur.execute("SELECT column_name, data_type FROM information_schema.columns WHERE table_name = 'tipos_obra'")
        columnas = cur.fetchall()
        for col in columnas:
            print(f"   ‚Ä¢ {col[0]} ({col[1]})")
        
        # 3. Crear datos de prueba para simulaci√≥n
        print(f"\n3Ô∏è‚É£ SIMULACI√ìN DE C√ÅLCULO:")
        area_prueba = 100  # m¬≤
        tipo_prueba = tipos[0]  # Primer tipo
        id_tipo, nombre, precio = tipo_prueba
        
        precio_num = float(precio) if precio else 0
        valor_calculado = area_prueba * precio_num
        
        print(f"   ‚Ä¢ Tipo: {nombre}")
        print(f"   ‚Ä¢ √Årea: {area_prueba} m¬≤")
        print(f"   ‚Ä¢ Precio base: Q{precio_num:,.0f} por m¬≤")
        print(f"   ‚Ä¢ Valor total: Q{valor_calculado:,.0f}")
        
        # 4. Verificar que el servidor est√© corriendo
        print(f"\n4Ô∏è‚É£ PROBANDO SERVIDOR LOCAL:")
        try:
            response = requests.get("http://localhost:5000", timeout=2)
            print(f"   ‚úÖ Servidor responde: {response.status_code}")
        except:
            print(f"   ‚ö†Ô∏è  Servidor no disponible en localhost:5000")
        
        print(f"\n‚úÖ CONFIGURACI√ìN CORRECTA PARA OBRAS FIJAS")
        print(f"üìù Los tipos est√°n disponibles y tienen precios v√°lidos")
        
        cur.close()
        conn.close()
        
    except Exception as e:
        print(f"‚ùå Error en prueba: {str(e)}")

def generar_datos_javascript():
    """Generar datos en formato JavaScript para debugging"""
    try:
        conn = get_connection()
        cur = conn.cursor()
        
        cur.execute("SELECT id_tipo_obra, nombre_tipo, precio_base, unidad_medida FROM tipos_obra WHERE activo = true")
        tipos = cur.fetchall()
        
        print(f"\nüîß DATOS PARA DEBUGGING JAVASCRIPT:")
        print("=" * 40)
        
        js_array = "const tiposObraData = [\n"
        for id_tipo, nombre, precio, unidad in tipos:
            precio_num = float(precio) if precio else 0
            js_array += f'  {{id: {id_tipo}, nombre: "{nombre}", precio: {precio_num}, unidad: "{unidad or "m¬≤"}"}},\n'
        
        js_array += "];"
        
        print(js_array)
        print(f"\nüìã Total de {len(tipos)} tipos disponibles")
        
        cur.close()
        conn.close()
        
    except Exception as e:
        print(f"‚ùå Error: {str(e)}")

if __name__ == "__main__":
    test_obras_fijas_api()
    generar_datos_javascript()