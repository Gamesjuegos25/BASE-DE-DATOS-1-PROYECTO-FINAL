#!/usr/bin/env python3
"""
VERIFICADOR Y CREADOR DE √ÅREAS
===============================
Verifica que existan √°reas en la base de datos y crea algunas b√°sicas si no hay
"""

from database import get_connection

def verificar_y_crear_areas():
    """Verifica √°reas existentes y crea b√°sicas si no hay"""
    print("üîç VERIFICANDO √ÅREAS EN BASE DE DATOS...")
    print("=" * 40)
    
    try:
        conn = get_connection()
        cur = conn.cursor()
        
        # Verificar √°reas existentes
        cur.execute("SELECT COUNT(*) FROM areas")
        total_areas = cur.fetchone()[0]
        
        print(f"üìä √Åreas encontradas: {total_areas}")
        
        if total_areas == 0:
            print("‚ö†Ô∏è  No se encontraron √°reas. Creando √°reas b√°sicas...")
            
            # Crear √°reas b√°sicas para construcci√≥n
            areas_basicas = [
                ('Estructural', 'Trabajos de estructura y cimientos'),
                ('El√©ctrica', 'Instalaciones el√©ctricas y sistemas'),
                ('Plomer√≠a', 'Sistemas de agua y drenaje'),
                ('Acabados', 'Pintura, pisos y detalles finales'),
                ('Techos', 'Estructuras de techo y cubiertas'),
                ('Ventanas', 'Instalaci√≥n de ventanas y puertas'),
                ('HVAC', 'Calefacci√≥n, ventilaci√≥n y aire acondicionado'),
                ('Paisajismo', 'Jardines y √°reas exteriores')
            ]
            
            for nombre, descripcion in areas_basicas:
                try:
                    cur.execute("""
                        INSERT INTO areas (nombre, descripcion) 
                        VALUES (%s, %s)
                    """, (nombre, descripcion))
                    print(f"‚úÖ √Årea creada: {nombre}")
                except Exception as e:
                    print(f"‚ùå Error creando √°rea {nombre}: {str(e)}")
            
            conn.commit()
            
            # Verificar nuevamente
            cur.execute("SELECT COUNT(*) FROM areas")
            total_areas = cur.fetchone()[0]
            print(f"üìä Total √°reas despu√©s de creaci√≥n: {total_areas}")
        
        # Mostrar todas las √°reas
        cur.execute("SELECT id, nombre, descripcion FROM areas ORDER BY nombre")
        areas = cur.fetchall()
        
        print(f"\nüìã √ÅREAS DISPONIBLES:")
        for area in areas:
            print(f"   {area[0]:2d}. {area[1]} - {area[2] or 'Sin descripci√≥n'}")
        
        cur.close()
        conn.close()
        
        return True
        
    except Exception as e:
        print(f"‚ùå Error verificando √°reas: {str(e)}")
        return False

def main():
    """Funci√≥n principal"""
    if verificar_y_crear_areas():
        print(f"\n‚úÖ Verificaci√≥n completada")
        print("üí° Las √°reas ahora deber√≠an aparecer en el formulario de actividades")
    else:
        print(f"\n‚ùå Error en verificaci√≥n")

if __name__ == "__main__":
    main()